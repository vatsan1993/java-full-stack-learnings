package com.example.td.testing;

// non-static import
// import static org.junit.jupiter.api.Assertions;
// 
// static import
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.junit.jupiter.params.provider.ValueSource;
import  com.example.td.service.NumericOperations;

class NumericOperationsTest {
	NumericOperations numOpt;
	@BeforeEach
	void init() {
		numOpt = new NumericOperations();
	}

	@AfterEach
	void cleanUp() {
		numOpt = null;
	}
	
	@Test
	@DisplayName("Testing isPrime method for prime numbers to return true")
	@Disabled
	void isPrimeTest_forPrimes() {
//		if we are using non static imports.
//		Assertions.assertTrue(NumericOperations.isPrime(5));
//		if we are using static imports.
		assertTrue(numOpt.isPrime(7));
		assertTrue(numOpt.isPrime(11));
		assertTrue(numOpt.isPrime(13));
	}
	
	
	@Test
	@DisplayName("Testing isPrime method for non prime numbers to return false")
	@Disabled
	void isPrimeTest_forNotPrimes() {
		assertFalse(numOpt.isPrime(8));
		assertFalse(numOpt.isPrime(10));
		assertFalse(numOpt.isPrime(1024));
	}

	@ParameterizedTest
	@Disabled
	@ValueSource(ints = {7, 11, 13, 107, 97})
	@DisplayName("Testing isPrime method for prime numbers to return true")
	void isPrimeTest_forPrimes2(int num) {
		assertTrue(numOpt.isPrime(num));
	}	
	
	@ParameterizedTest
	@Disabled
	@ValueSource(ints = {8,10, 20, 22, 32, 42})
	@DisplayName("Testing isPrime method for non prime numbers to return false")
	void isPrimeTest_forNonPrimes2(int num) {
		assertFalse(numOpt.isPrime(num));
	}	
	
	@ParameterizedTest
	@CsvSource(value = {"7:true", "8:false", "11:true", "12:false"}, delimiter = ':')
	void isPrimeTest(int num, boolean expected) {
		assertEquals(expected, numOpt.isPrime(num));
	}
	
	@ParameterizedTest
	@DisplayName("Testing if isOdd return true for odd values and false for even values")
	@CsvSource(value = {"2:false", "3:true", "7:true", "-7:true", "-2:false", "-3:true"}, delimiter = ':')
	void isOddTest(int num, boolean expected) {
		assertEquals(expected, numOpt.isOdd(num));
	}
	
	@Test
	@DisplayName("Testing if getFactors gives us the correct factors of a number.")
	void getFactorsTest() {
		int testData = 25;
		List<Integer> expected = Arrays.asList(new Integer[] {1, 5, 25});
		List<Integer> actual = numOpt.getFactors(testData);
	}

}
